generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

model Tournament {
  id Int @id @default(autoincrement())
  name String
  events Event[]
}

model Event {
  id Int @id @default(autoincrement())
  name String
  format String // EventFormat
  matches Match[]

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
}

// enum EventFormat {
//   OpenSingles
//   OpenDoubles
//   ClassicDoubles
//   WomenDoubles
// }

model Match {
  id Int @id @default(autoincrement())
  format String // MatchFormat
  games Game[]
  
  team1 Team @relation("Team1", fields: [team1Id], references: [id])
  team1Id Int
  
  team2 Team @relation("Team2", fields: [team2Id], references: [id])
  team2Id Int

  event Event @relation(fields: [eventId], references: [id])
  eventId Int
}

// enum MatchFormat {
//   F1
//   F7
//   F10
//   BO3
//   BO5
// }

model Team {
  id Int @id @default(autoincrement())
  name String?
  country String?
  players TeamPlayer[]

  matchesAsTeam1 Match[] @relation("Team1")
  matchesAsTeam2 Match[] @relation("Team2")
}

model Game {
  id Int @id @default(autoincrement())
  score1 Int
  score2 Int

  match Match @relation(fields: [matchId], references: [id])
  matchId Int
  // players1 Player[] @relation("Players1", references: [id])
  // players2 Player[] @relation("Players2", references: [id])
}


model Player {
  id Int @id @default(autoincrement())
  name String
  teams TeamPlayer[]
  // matches Match[]
}

model TeamPlayer {
  team Team @relation(fields: [teamId], references: [id])
  teamId Int
  player Player @relation(fields: [playerId], references: [id])
  playerId   Int

  @@id([teamId, playerId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
